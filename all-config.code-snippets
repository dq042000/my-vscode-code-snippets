{
	// Place your GLOBAL snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
    "env example": {
        "prefix": "config-env",
        "body": [
            "#!/usr/bin/env bash",
            "# See https://docs.docker.com/compose/environment-variables/#the-env-file",
            "",
            "### PORTS #################################################",
            "NGINX_PORT=${1:9977}",
            "MYSQLDB_PORT=${2:9978}",
            "MONGODB_PORT=${3:9979}",
            "",
            "### DEFAULT ###########################################",
            "PHP_DIRECTORY=${4:api}",
            "",
            "### PHP Version ###########################################",
            "PHP_VERSION=${5:${2:8.1}}",
            "",
            "### NGINX ############################################",
            "NGINX_HOST_LOG_PATH=./Log",
            "",
            "### MYSQL ############################################",
            "MYSQL_HOST=${6:mysqldb}",
            "MYSQL_DATABASE=${7:guidance}",
            "MYSQL_ROOT_USER=${8:root}",
            "MYSQL_ROOT_PASSWORD=${9:stern123}",
            "MYSQL_USER=${8:root}",
            "MYSQL_PASSWORD=${9:stern123}",
            "",
            "### MIGRATION ########################################",
            "MIGRATION_FILE=${7:guidance}.mwb",
            "MIGRATION_PATH=data/DoctrineORMModule/Migrations",
            "",
            "### MONGODB ##########################################",
            "MONGO_URL=mongodb://mongodb:27017",
            "MONGO_INITDB_ROOT_USERNAME=${10:admin}",
            "MONGO_INITDB_ROOT_PASSWORD=${11:admin123}",
            "MONGO_INITDB_DATABASE=${7:guidance}",
            "MONGO_INITDB_USERNAME=stern",
            "MONGO_INITDB_PASSWORD=stern",
            "MONGO_REPLICA_SET_NAME=rs0",
        ],
        "description": "Create env file for docker-compose",
    },
    "docker-compose example": {
        "prefix": "config-docker-compose",
        "body": [
            "version: '3.3'",
            "",
            "services:",
            "memcached:",
            "    image: memcached",
            "    restart: always",
            "    ports:",
            "    - '11211'",
            "    networks:",
            "    - network_default",
            "",
            "${1:php}:",
            "    build: .docker/php",
            "    volumes:",
            "    - .docker/php/php$${PHP_VERSION}.ini:/etc/php/$${PHP_VERSION}/fpm/php.ini",
            "    - .docker/php/php$${PHP_VERSION}.ini:/etc/php/$${PHP_VERSION}/cli/php.ini",
            "    - ./web:/var/app",
            "    working_dir: /var/app/$${PHP_DIRECTORY}",
            "    environment:",
            "    TZ: Asia/Taipei",
            "    ports:",
            "    - '9000'",
            "    networks:",
            "    - network_default",
            "",
            "nginx:",
            "    build: .docker/nginx/",
            "    depends_on:",
            "    - ${1:php}",
            "    ports:",
            "    - $${NGINX_PORT}:80",
            "    links:",
            "    - ${1:php}",
            "    volumes:",
            "    - ./web:/var/app",
            "    - $${NGINX_HOST_LOG_PATH}:/var/log/nginx",
            "    networks:",
            "    - network_default",
            "",
            "${2:mysqldb}:",
            "    image: mariadb",
            "    restart: always",
            "    env_file:",
            "    - '.env'",
            "    environment:",
            "    - MYSQL_DATABASE=$${MYSQL_DATABASE}",
            "    - MYSQL_ROOT_PASSWORD=$${MYSQL_ROOT_PASSWORD}",
            "    - MYSQL_USER=$${MYSQL_USER}",
            "    - MYSQL_PASSWORD=$${MYSQL_PASSWORD}",
            "    - MAX_CONNECTIONS=1024",
            "    ports:",
            "    - '3306'",
            "    volumes:",
            "    - './DB/mysql:/var/lib/mysql'",
            "    - '.docker/mysql/conf:/etc/mysql/conf.d'",
            "    # command: mysqld --sql_mode="" --innodb-large-prefix=on --innodb-file-format=barracuda --innodb-file-per-table=on",
            "    command: mariadbd --sql_mode=""",
            "    networks:",
            "    - network_default",
            "",
            "myadmin:",
            "    image: phpmyadmin/phpmyadmin",
            "    ports:",
            "    - $${MYSQLDB_PORT}:80",
            "    volumes:",
            "    - .docker/php/upload.ini:/usr/local/etc/php/conf.d/php-phpmyadmin.ini",
            "    environment:",
            "    - PMA_ARBITRARY=1",
            "    - PMA_HOSTS=${2:mysqldb}",
            "    - UPLOAD_LIMIT= 300000000",
            "    depends_on:",
            "    - ${2:mysqldb}",
            "    networks:",
            "    - network_default",
            "",
            "mongodb:",
            "    image: library/mongo",
            "    volumes:",
            "    - ./DB/mongodb:/data/db",
            "    - ./DB/backup:/backup",
            "    command: mongod --auth",
            "    ports:",
            "    - $${MONGODB_PORT}:27017",
            "    privileged: true",
            "    environment:",
            "    MONGO_INITDB_ROOT_USERNAME: $${MONGO_INITDB_ROOT_USERNAME}",
            "    MONGO_INITDB_ROOT_PASSWORD: $${MONGO_INITDB_ROOT_PASSWORD}",
            "    MONGO_INITDB_DATABASE: $${MONGO_INITDB_DATABASE}",
            "    TZ: Asia/Taipei",
            "    networks:",
            "    - network_default",
            "",
            "networks:",
            "network_default:",
            "    driver: bridge",
            "    ipam:",
            "    driver: default",
            "    config:",
            "        - subnet: 172.40.0.0/24",
            "        gateway: 172.40.0.1",
        ],
        "description": "Create docker-compose.yml file",
    },
    "php dockerfile example": {
        "prefix": "config-php-dockerfile",
        "body": [
            "FROM ubuntu:${1:20.04}",
            "ARG DEBIAN_FRONTEND=noninteractive",
            "RUN apt-get clean && apt-get -y update && apt-get -y upgrade && apt-get install -y locales curl software-properties-common git \\",
            "        && locale-gen zh_TW.UTF-8",
            "RUN LC_ALL=zh_TW.UTF-8",
            "",
            "RUN apt install software-properties-common",
            "RUN add-apt-repository ppa:ondrej/php",
            "RUN apt-get update --fix-missing",
            "",
            "RUN apt-get install -y --force-yes zip unzip php${2:8.1}-bcmath php${2:8.1}-bz2 php${2:8.1}-cli php${2:8.1}-common php${2:8.1}-curl \\",
            "        php${2:8.1}-cgi php${2:8.1}-dev php${2:8.1}-fpm php${2:8.1}-gd php${2:8.1}-gmp php${2:8.1}-imap php${2:8.1}-intl \\",
            "        php${2:8.1}-ldap php${2:8.1}-mbstring php${2:8.1}-mysql \\",
            "        php${2:8.1}-odbc php${2:8.1}-opcache php${2:8.1}-pgsql php${2:8.1}-phpdbg php${2:8.1}-pspell \\",
            "        php${2:8.1}-readline php${2:8.1}-soap php${2:8.1}-sqlite3 \\",
            "        php${2:8.1}-tidy php${2:8.1}-xml php${2:8.1}-xmlrpc php${2:8.1}-xsl php${2:8.1}-zip php${2:8.1}-apcu \\",
            "        php${2:8.1}-redis php${2:8.1}-mongodb php${2:8.1}-memcached php${2:8.1}-imagick php${2:8.1}-xdebug composer",
            "",
            "RUN sed -i \"s/;date.timezone =.*/date.timezone = Asia\/Taipei/\" /etc/php/${2:8.1}/cli/php.ini",
            "RUN sed -i \"s/;date.timezone =.*/date.timezone = Asia\/Taipei/\" /etc/php/${2:8.1}/fpm/php.ini",
            "RUN sed -i \"s/display_errors = Off/display_errors = On/\" /etc/php/${2:8.1}/fpm/php.ini",
            "RUN sed -i \"s/upload_max_filesize = .*/upload_max_filesize = 60M/\" /etc/php/${2:8.1}/fpm/php.ini",
            "RUN sed -i \"s/post_max_size = .*/post_max_size = 65M/\" /etc/php/${2:8.1}/fpm/php.ini",
            "RUN sed -i \"s/;cgi.fix_pathinfo=1/cgi.fix_pathinfo=0/\" /etc/php/${2:8.1}/fpm/php.ini",
            "RUN sed -i -e \"s/pid =.*/pid = \/var\/run\/php${2:8.1}-fpm.pid/\" /etc/php/${2:8.1}/fpm/php-fpm.conf",
            "RUN sed -i -e \"s/error_log =.*/error_log = \/proc\/self\/fd\/2/\" /etc/php/${2:8.1}/fpm/php-fpm.conf",
            "RUN sed -i -e \"s/;daemonize\\s*=\\s*yes/daemonize = no/g\" /etc/php/${2:8.1}/fpm/php-fpm.conf",
            "RUN sed -i \"s/listen = .*/listen = 9000/\" /etc/php/${2:8.1}/fpm/pool.d/www.conf\\",
            "RUN sed -i \"s/;catch_workers_output = .*/catch_workers_output = yes/\" /etc/php/${2:8.1}/fpm/pool.d/www.conf",
            "RUN curl https://getcomposer.org/installer > composer-setup.php && php composer-setup.php && mv composer.phar /usr/local/bin/composer && rm composer-setup.php",
            "RUN composer self-update --2.2",
            "RUN apt-get clean && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*",
            "",
            "",
            "WORKDIR /var/app",
            "",
            "EXPOSE 9000",
            "",
            "CMD [\"php-fpm${2:8.1}\"]",
        ],
        "description": "Create php dockerfile",
    },
    "nginx default.conf example": {
        "prefix": "config-nginx-default.conf",
        "body": [
            "server {",
            "    charset utf-8;",
            "    listen 80;",
            "    index index.php index.html;",
            "    access_log /dev/stdout;",
            "    error_log /dev/stderr;",
            "    root /var/app/${1:api}/public;",
            "",
            "    if (!-e $$request_filename) {",
            "        rewrite ^/(.*)$ /index.php?/\\$1 last;",
            "        break;",
            "    }",
            "",
            "    location ~ \\.php$ {",
            "        try_files $$uri =404;",
            "        fastcgi_split_path_info ^(.+\\.php)(/.+)$;",
            "        fastcgi_pass ${3:php}:9000;",
            "        fastcgi_index index.php;",
            "        include fastcgi_params;",
            "        fastcgi_param SCRIPT_FILENAME $$document_root$$fastcgi_script_name;",
            "        fastcgi_param PATH_INFO $$fastcgi_path_info;",
            "    }",
            "    client_max_body_size 20M;",
            "}            ",
        ],
        "description": "Create nginx default.conf file",
    },
    "phpunit example": {
        "prefix": "config-phpunit",
        "body": [
            "<?xml version=\"1.0\" encoding=\"UTF-8\"?>",
            "<phpunit xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"",
            "            xsi:noNamespaceSchemaLocation=\"https://schema.phpunit.de/10.5/phpunit.xsd\"",
            "            bootstrap=\"vendor/autoload.php\"",
            "            cacheDirectory=\".phpunit.cache\"",
            "            executionOrder=\"depends,defects\"",
            "            requireCoverageMetadata=\"true\"",
            "            beStrictAboutCoverageMetadata=\"true\"",
            "            beStrictAboutOutputDuringTests=\"true\"",
            "            failOnRisky=\"true\"",
            "            failOnWarning=\"true\"",
            "            colors=\"true\">",
            "    <coverage includeUncoveredFiles=\"true\">",
            "        <report>",
            "            <clover outputFile=\"coverage.xml\"/>",
            "            <html outputDirectory=\".coverage-reports\" lowUpperBound=\"35\" highLowerBound=\"70\"/>",
            "        </report>",
            "    </coverage>",
            "    <php>",
            "        <env name=\"APP_ENV\" value=\"testunit\"/>",
            "        <env name=\"XDEBUG_MODE\" value=\"coverage\"/>",
            "        <ini name=\"xdebug.mode\" value=\"coverage\"/>",
            "    </php>",
            "    <testsuites>",
            "        <testsuite name=\"Step1\">",
            "            <directory>${1:./module/ImprovePlan}/test</directory>",
            "        </testsuite>",
            "    </testsuites>",
            "    <source restrictDeprecations=\"true\" restrictNotices=\"true\" restrictWarnings=\"true\">",
            "        <include>",
            "            <directory suffix=\".php\">${1:./module/ImprovePlan}</directory>",
            "        </include>",
            "    </source>",
            "</phpunit>",
        ],
        "description": "",
    },
}